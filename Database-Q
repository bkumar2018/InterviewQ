
create database test;
-- Create the dept table
CREATE TABLE dept (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL
);

-- Create the emp table with dept_id as a foreign key referencing dept table
CREATE TABLE emp (
    emp_id SERIAL PRIMARY KEY,
    emp_name VARCHAR(100) NOT NULL,
    emp_dept_id INT NOT NULL,
    -- Foreign key constraint
    CONSTRAINT fk_emp_dept FOREIGN KEY (emp_dept_id) REFERENCES dept(dept_id)
);

dept_id in the dept table is defined as SERIAL, which means it will auto-increment.
dept_name is a VARCHAR field to store the department name.
In the emp table, emp_id is the primary key, also defined as SERIAL for auto-incrementing.
emp_name is a VARCHAR field to store the employee name.
emp_dept_id is an INT field to store the department ID of the employee.
The FOREIGN KEY constraint named fk_emp_dept is added to the emp_dept_id field, referencing the dept_id column in the dept table. This ensures referential integrity, meaning that every value in emp_dept_id must exist in the dept_id column of the dept table.

-- Insert data into dept table
INSERT INTO dept (dept_name) VALUES
    ('Human Resources'),
    ('Finance'),
    ('Marketing');

-- Insert data into emp table
INSERT INTO emp (emp_name, emp_dept_id) VALUES
    ('John Doe', 1),  -- John Doe works in Human Resources (dept_id = 1)
    ('Jane Smith', 2), -- Jane Smith works in Finance (dept_id = 2)
    ('Alice Johnson', 3); -- Alice Johnson works in Marketing (dept_id = 3)


JOINS:
To perform a join in a database, you typically use the JOIN clause to combine rows from two or more tables based on a related column between them. 
In your case, you might want to join the emp and dept tables to get information about employees along with their department names.

INNER JOIN:
An INNER JOIN returns only the rows that have matching values in both tables based on the join condition specified in the ON clause. 
In this case, the join condition is emp.emp_dept_id = dept.dept_id, meaning that only employees who belong to a department (where their emp_dept_id matches a dept_id in the dept table) will be included in the result set.

SELECT emp.emp_id, emp.emp_name, dept.dept_name
FROM emp
JOIN dept ON emp.emp_dept_id = dept.dept_id;


OUTER JOIN:
To perform an outer join, you can use either a LEFT OUTER JOIN, a RIGHT OUTER JOIN, or a FULL OUTER JOIN

test=# SELECT emp.emp_id, emp.emp_name, dept.dept_name
test-# FROM emp
test-# LEFT OUTER JOIN dept ON emp.emp_dept_id = dept.dept_id;
 emp_id |   emp_name    |    dept_name    
--------+---------------+-----------------
      1 | John Doe      | Human Resources
      2 | Jane Smith    | Finance
      3 | Alice Johnson | Marketing
      5 | User1         | null
(4 rows)

test=# SELECT emp.emp_id, emp.emp_name, dept.dept_name
FROM emp
RIGHT OUTER JOIN dept ON emp.emp_dept_id = dept.dept_id;
 emp_id |   emp_name    |    dept_name    
--------+---------------+-----------------
      1 | John Doe      | Human Resources
      2 | Jane Smith    | Finance
      3 | Alice Johnson | Marketing
      5 | User1         | null
        |               | IT Operation
        |               | Security
(6 rows)

test=# 
test=# SELECT emp.emp_id, emp.emp_name, dept.dept_name
FROM emp
FULL OUTER JOIN dept ON emp.emp_dept_id = dept.dept_id;
 emp_id |   emp_name    |    dept_name    
--------+---------------+-----------------
      1 | John Doe      | Human Resources
      2 | Jane Smith    | Finance
      3 | Alice Johnson | Marketing
      5 | User1         | null
        |               | IT Operation
        |               | Security
(6 rows)

test=# 
Certainly! A LEFT JOIN, also known as a LEFT OUTER JOIN, returns all rows from the left table (the first table mentioned in the FROM clause) and the matched rows from the right table (the second table mentioned) based on the specified join condition. If there is no match found in the right table, NULL values are returned for the columns from the right table.
LEFT JOIN ensures that all rows from the emp table are included in the result set, regardless of whether there is a matching row in the dept table.
If an employee does not have a corresponding department (i.e., there's no match based on the emp_dept_id), the dept_name column will contain NULL values.
Rows from the dept table that do not have corresponding employees will be excluded from the result set.


Use Cases:
1. Left Joins are useful when you want to include all records from the primary table and only the related records from the secondary table.
///////////////////

The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
ALTER TABLE emp ADD salary DECIMAL(10,2);

The UPDATE statement is used to modify the value(s) in existing records in a table.
UPDATE emp SET salary = 20500.02 WHERE emp_name = 'John Doe';

/////
Second Highest salary from an employee table ?
Using DISTINCT and LIMIT keywords 

1. Select DISTINCT salary FROM emp ORDER BY salary DESC LIMIT 1 OFFSET 1
2. Select MAX(salary) as second_highest_salary FROM emp Where salary < (Select MAX(salary) from emp);

